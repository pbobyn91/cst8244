#include <stdlib.h>
#include <stdio.h>
#include <sys/iofunc.h>
#include <sys/dispatch.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <errno.h>

char data[255];
int server_coid;

typedef union {
    struct _pulse pulse;
    char msg[255];
} my_message_t;

int io_read(resmgr_context_t, io_read_t, RESMGR_OCV_T);
int io_write(resmgr_context_t, io_write_t, RESMGR_OCB_T);


int main(void) {
	puts("Hello World!!!"); /* prints Hello World!!! */
	return EXIT_SUCCESS;
}

int io_read(resmgr_context_t *ctp, io_read_t *msg, RESMGR_OCB_T *ocb)
{
	int nb;

	if (data == NULL) return 0;

	nb = strlen(data);

	//test to see if we have already sent the whole message.
	if (ocb->offset == nb)
		return 0;

	//We will return which ever is smaller the size of our data or the size of the buffer
	nb = min(nb, msg->i.nbytes);

	//Set the number of bytes we will return
	_IO_SET_READ_NBYTES(ctp, nb);

	//Copy data into reply buffer.
	SETIOV(ctp->iov, data, nb);

	//update offset into our data used to determine start position for next read.
	ocb->offset += nb;

	//If we are going to send any bytes update the access time for this resource.
	if (nb > 0)
		ocb->attr->flags |= IOFUNC_ATTR_ATIME;

	return(_RESMGR_NPARTS(1));
}

int io_write(resmgr_context_t *ctp, io_write_t *msg, RESMGR_OCB_T *ocb)
{
	int nb = 0;

	    if( msg->i.nbytes == ctp->info.msglen - (ctp->offset + sizeof(*msg) ))
	    {
	        /* have all the data */
		char *buf;
		char *alert_msg;
		int i, small_integer;
		buf = (char *)(msg+1);

		if(strstr(buf, "alert") != NULL){
			for(i = 0; i < 2; i++){
				alert_msg = strsep(&buf, " ");
			}
			small_integer = atoi(alert_msg);
			if(small_integer >= 1 && small_integer <= 99){
				//FIXME :: replace getprio() with SchedGet()
				MsgSendPulse(server_coid, SchedGet(0,0,NULL), _PULSE_CODE_MINAVAIL, small_integer);
			} else {
				printf("Integer is not between 1 and 99.\n");
			}
		} else {
			strcpy(data, buf);
		}

		nb = msg->i.nbytes;
	    }
	    _IO_SET_WRITE_NBYTES (ctp, nb);

	    if (msg->i.nbytes > 0)
	        ocb->attr->flags |= IOFUNC_ATTR_MTIME | IOFUNC_ATTR_CTIME;

	    return (_RESMGR_NPARTS (0));
}
